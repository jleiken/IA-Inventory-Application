package learn;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.*;

public class MainPane extends javax.swing.JFrame 
{
    private static ArrayList<Item> myInv;
    private final String textFile;
    
    public MainPane() 
    {
        initComponents();
        setLocation(100, 100);
        textFile = "inventory.txt";
        myInv = new ArrayList<>();
        readFile();
        URL imageURL = getClass().getResource("apple.png");
        ImageIcon img = new ImageIcon(imageURL);
        setIconImage(img.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        addInv = new javax.swing.JButton();
        editInv = new javax.swing.JButton();
        listInv = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Main");
        setMaximumSize(new java.awt.Dimension(2147, 2147));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setResizable(false);

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("What would you like to do?");

        addInv.setText("Add to inventory");
        addInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInvActionPerformed(evt);
            }
        });

        editInv.setText("Edit inventory");
        editInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInvActionPerformed(evt);
            }
        });

        listInv.setText("List inventory");
        listInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listInvActionPerformed(evt);
            }
        });

        quitButton.setText("Save & Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(listInv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addInv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editInv, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addInv, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editInv, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listInv, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listInvActionPerformed
        clean(myInv);
        ArrayList<String> strs = new ArrayList<>();
        for (Item myInv1 : myInv)
            strs.add(myInv1.toString());
        NewListItems list = new NewListItems(strs, getLocation());
        list.setVisible(true);
    }//GEN-LAST:event_listInvActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        try
        {
           //convoluted way to be able to write to the file
           BufferedWriter bw = new BufferedWriter(new FileWriter(textFile));
           for(Item ite : myInv)
           {
               bw.write(ite.toString());
               bw.write(System.getProperty("line.separator"));
           }
           bw.close();
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, "There was an error. Please try again.");
            return;
        }
        clean(myInv);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void addInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInvActionPerformed
        myInv.add(new ColoredItem("", 0, "", null));
        AddItem adder = new AddItem((ColoredItem) myInv.get(myInv.size()-1), getLocation());
        adder.setVisible(true);
    }//GEN-LAST:event_addInvActionPerformed

    private void editInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInvActionPerformed
        clean(myInv);
        EditPane editor = new EditPane(myInv, getLocation());
        editor.setVisible(true);
    }//GEN-LAST:event_editInvActionPerformed

    /**
     * Removes null or invalid items.
     * Converts ColoredItems with no color to generic items.
     * @param inv ArrayList of items to be cleaned
    */
    public static void clean(ArrayList<Item> inv)
    {
        for(int i = 0; i < inv.size(); i++)
        {
            Item item = inv.get(i);
            if(item == null)
            {
                inv.remove(i);
                i--;
            }
            else if(item.getName().equals(""))
            {
                inv.remove(i);
                i--;
            }
            else if(item.getQuantity() < 1)
            {
                inv.remove(i);
                i--;
            }
            else if(item.getLoc().equals(""))
            {
                inv.remove(i);
                i--;
            }
            else if(item instanceof ColoredItem && ((ColoredItem)item).getColor() == null)
            {
                Item newItem = new Item(item.getName(), item.getQuantity(), item.getLoc());
                inv.set(i, newItem);
            }
        }
    }
    
    /**
     * For reading the file on startup.
     * Automatically writes contents of fileName to myInv.
    */
    private void readFile()
    {
        try
        {
            BufferedReader text = new BufferedReader(new FileReader(textFile));
            while(text.ready())
            {
                String thisLine = text.readLine();
                String name = thisLine.substring(thisLine.indexOf("#")+2, thisLine.indexOf("@")-1);
                String quantity = thisLine.substring(0, thisLine.indexOf("#"));
                Item item;
                //Converts text color to java.awt.Color
                if(thisLine.indexOf("r=") != -1)
                {
                    String loc = thisLine.substring(thisLine.indexOf("@")+2, thisLine.indexOf("&")-1);
                    Integer r = Integer.parseInt(thisLine.substring(thisLine.indexOf("r=")+2, thisLine.indexOf(",g")));
                    Integer g = Integer.parseInt(thisLine.substring(thisLine.indexOf("g=")+2, thisLine.indexOf(",b")));
                    Integer b = Integer.parseInt(thisLine.substring(thisLine.indexOf("b=")+2, thisLine.indexOf("]")));
                    item = new ColoredItem(name, Integer.parseInt(quantity), loc, new Color(r, g, b));
                }
                else
                {
                    String loc = thisLine.substring(thisLine.indexOf("@")+2, thisLine.length());
                    item = new Item(name, Integer.parseInt(quantity), loc);
                }
                myInv.add(item);
            }
            text.close();
        } catch(Exception e)
        {
            if(e instanceof FileNotFoundException)
            {
            JOptionPane.showMessageDialog(rootPane, "No inventory file was"
                        + " found, so one will be created\nin this folder."
                        + " It must be stored in the same folder\nas the application."
                        ,"File not found",JOptionPane.WARNING_MESSAGE);
            }
            else
                System.out.println(e);
        }
    }
    
    /**
     * Checks if two strings have the banned values #,&,@ or :
     * @param str1 a string to check
     * @param str2 a string to check
     * @return if neither string has a banned value, returns true
     */
    public static boolean noBannedVals(String str1, String str2)
    {
        if(str1.contains("#"))
            return false;
        else if(str1.contains("@"))
            return false;
        else if(str1.contains("&"))
            return false;
        else if(str1.contains(":"))
            return false;
        else if(str2.contains("#"))
            return false;
        else if(str2.contains("@"))
            return false;
        else if(str2.contains("&"))
            return false;
        else if(str2.contains(":"))
            return false;
        else
            return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); 
        }catch(Exception e){}
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainPane().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInv;
    private javax.swing.JButton editInv;
    private javax.swing.JButton listInv;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
